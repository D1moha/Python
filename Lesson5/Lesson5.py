import sqlite3 # Подключаем sqlite3

def create_new_table(): # Создаём функцию для созлания таблицы в базе данных
    conn = sqlite3.connect('./Lesson5/sitylist.db') # Открываем базу данных
    cursor = conn.cursor() # Создаём объект cursor
    cursor.execute("CREATE TABLE if not exists NewTable (Country, City, CityId)") # Создаём таблицу NewTable с полями Country, City, CityId
    print('Таблица NewTable создана') # Выводим уведомление о том что таблица создана
    cursor.close() # Закрываем объект cursor
    conn.close() # Закрываем базу данных
create_new_table()

def full_city_list(): # Создаём функцию которая добавит данные из файла в базу данных
    conn = sqlite3.connect('./Lesson5/sitylist.db') # Открываем базу данных
    cursor = conn.cursor() # Создаём объект cursor
    cursor.execute("SELECT * FROM NewTable") #Формируем запрос в базу для получения данных  
    res = cursor.fetchall() # Забираем ответ из базы в переменную
    if len(res) < 1: # Делаем проверку, если данных в базе нет, тогда переносим данные из файла в базу
        with open('./Lesson5/full_city_list.txt', 'r') as my_file: # Открываем файл
            rows = my_file.readlines()[1:][:-2] # Убираем первую и 2 последние строки из нашего файла, чтобы оставить исключительно данные для добавления в базу
            for line in rows: # Запускаем цикл и читаем данные построчно
                line = line.replace('"','') # Убираем двойные кавычки
                line = line.replace('\n','') # Убираем перенос строки из файла 
                cursor.execute("INSERT INTO NewTable VALUES (?,?,?)", line.split(';')) #Каждую строку из файла добавляем в таблицу как новую запись
        conn.commit() # Применяем изменения
        print('Данные из файла добавлены в базу') # Выводим уведомление о том что данные занесены в базу
        cursor.close() # Закрываем объект cursor
        conn.close() # Закрываем базу данных
    else: # Сюда попадаем если в базе уже есть данные, повторно вносить не будем (для простоты сделал проверку на наличие хотя бы одной записи)
        print('Данные из файла уже были добавлены в базу') # Выводим уведомление о том что данные были уже ранее добавлены в базу
full_city_list()

def insert_city_list(country, city, сityid): # Создаём функцию которая добавит новые данные в базу
    need_insert = input('Добавить новые данные в базу? Да / Нет: ') # Выводим запрос на необходимость добавления данных
    if need_insert == 'Да': # Если ввели Да, тогда собираем данные для добавления
        country = input('Добавить страну: ') # Просим пользователя добавить страну
        city = input('Добавить город: ') # Просим пользователя добавить город
        сityid = input('Добавить код: ') # Просим пользователя добавить код города
        conn = sqlite3.connect('./Lesson5/sitylist.db') # Открываем базу данных
        cursor = conn.cursor() # Создаём объект cursor
        new_data = (country, city, сityid)
        cursor.execute("INSERT INTO NewTable VALUES (?,?,?)", new_data) #Формируем запрос для добавления новых данных в базу 
        conn.commit() # Применяем изменения
        print('Новые данные успешно добавлены в базу.',' Страна:',new_data[0],', Город:',new_data[1],', Код:', new_data[2],) # Выводим сообщение с данными которые добавлены в базу
        cursor.close() # Закрываем объект cursor
        conn.close() # Закрываем базу данных
    else: # Сюда попадаем если пользователь не захотел добавлять даннные
        print('Значит ничего добавлять не будем') # Выводим уведомление о том что ничего добавлять не будем
insert_city_list('country', 'city', 'сityid')

def update_city_list(country, city, сityid): # Создаём функцию которая обновит данные в базе по указанному коду
    need_update = input('Обновить данные в базе? Да / Нет: ') # Выводим запрос на необходимость обновления данных
    if need_update == 'Да': # Если ввели Да, тогда собираем данные для обновления
        UpdateCityId = input('Введите код города, который нужно обновить: ') # Просим пользователя указать код города
        conn = sqlite3.connect('./Lesson5/sitylist.db') # Открываем базу данных
        cursor = conn.cursor() # Создаём объект cursor
        cursor.execute("SELECT * FROM NewTable where CityId = ?", (UpdateCityId, )) # Формируем запрос, чтобы вытянуть из базы страну и город по указанному коду города
        res = cursor.fetchall() # Забираем ответ из базы в переменную
        if len(res) > 0: # Делаем проверку, если есть данные в базе по указанному коду, тогда готовимся к обновлению
            print (res[0][0],' ', res[0][1]) # Выводим пользователю страну и город, которые будем обновлять
            check_need_update = input('Обновить страну и город в базе? Да / Нет: ') # Выводим запрос для подтвердения обновления
            if check_need_update == 'Да': # Если пользователь подтвердил необходимость обновление, продолаем собирать новые данные
                upd_country = input('Обновить на страну: ') # Просим пользователя указать новую страну
                upd_city = input('Обновить на город: ') # Просим пользователя указать новый город
                column_values = (upd_country, upd_city, UpdateCityId)
                cursor.execute("UPDATE NewTable set Country = ?, City = ? where CityId = ?", column_values) # Формируем запрос для обновления данных в базе
                conn.commit() # Применяем изменения
                print('Данные успешно обновлены в базе')
            else: # Сюда попадаем если пользователь передумал обновлять данные
                print('Значит данный город обновлять не будем')
        else: # Сюда попадаем если пользователь ввел код города которого нет в базе
            print('Города с таким кодом нет')
        cursor.close() # Закрываем объект cursor
        conn.close() # Закрываем базу данных
    else: # Сюда попадаем если пользователь не хочет обновлять данные
        print('Значит ничего обновлять не будем')
update_city_list('country', 'city', 'сityid')

def delete_city_list(): # Создаём функцию которая удалит данные в базе по указанному коду
    need_delete = input('Удалить данные из базы? Да / Нет: ') # Выводим запрос на необходимость удаления данных
    if need_delete == 'Да': # Если ввели Да, тогда готовимся к удалению данных
        DeleteCityId = input('Введите код города, который нужно удалить: ') # Просим пользователя ввести код города для удаления данных
        conn = sqlite3.connect('./Lesson5/sitylist.db') # Открываем базу данных
        cursor = conn.cursor() # Создаём объект cursor
        cursor.execute("SELECT City FROM NewTable where CityId = ?", (DeleteCityId, )) # Формируем запрос, чтобы вытянуть из базы город по указанному коду города
        res = cursor.fetchone()  # Забираем ответ из базы в переменную
        if len(res) > 0: # Делаем проверку, если есть данные в базе по указанному коду, тогда готовимся к удалению
            print (res[0]) # Выводим пользователю город, который будем удалять
            check_need_delete = input('Удалить город из базы? Да / Нет: ') # Выводим запрос для подтвердения удаления
            if check_need_delete == 'Да': # Если пользователь подтвердил, то переходим к удалению
                cursor.execute("DELETE FROM NewTable where CityId = ?", (DeleteCityId, )) # Формируем запрос для удаления данных в базе
                conn.commit() # Применяем изменения
                print('Данные успешно удалены из базы')
            else: # Сюда попадаем если пользователь передумал удалять город из базы
                print('Значит данный город удалять не будем')
        else: # Сюда попадаем, если в базе нет города с таким кодом как ввёл пользователь
            print('Города с таким кодом нет')
        cursor.close() # Закрываем объект cursor
        conn.close() # Закрываем базу данных
    else: # Сюда попадаем если пользователь не хочет удалять данные
        print('Значит ничего удалять не будем')
delete_city_list()